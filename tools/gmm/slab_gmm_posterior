#!/bin/sh -e

# SPDX-License-Identifier: MIT

cmd=$(basename $0)
. $SLAB_ROOT/tools/utils/utils.sh

#######################################################################
# Defaults

compression=0
njobs=1

#######################################################################

show_usage() {
    echo "usage: $cmd [options] <model> <features> <uttids> <out>"
}

show_help() {
    show_usage
    echo ""
    echo "Compute the GMM's components posterior on <dataset>."
    echo ""
    echo "  -c C            compression level from 0 to 9 (default: $compression)"
    echo "  -h              show this help message"
    echo "  -n N            use N parallel jobs (default: $njobs)"
}

while :; do
    case "$1" in
        -c) compression=$2; shift;;
        -h) show_help; exit 0;;
        -n) njobs=$2; shift;;
        -*)
            echo "Unknown option: $1. Try '$0 -h' for more informations."  1>&2
            echo "" 1>&2
            show_usage 1>&2
            exit 1;;
        *) break;;
    esac
    shift
done

if [ $# -ne 4 ]; then
    show_usage 1>&2
    exit 1
fi

model=$1 && assert_not_missing $model
features=$2 && assert_not_missing $features
uttids=$3 && assert_not_missing $uttids
out=$4
odir=$(dirname $out)
mkdir -p $odir

tmp=$(mktemp -d -p $odir)
trap 'rm -fr "$tmp"; trap - EXIT; exit' EXIT INT HUP
cwd=$(pwd)
cd $tmp
split -n l/$njobs $uttids --numeric-suffixes=1
rename 's/x0+/x/' x*
cd $cwd

. $SLAB_ROOT/tools/gmm/parallel_env.sh

$parallel_cmd_posterior "cat $tmp/x\$SGE_TASK_ID | julia --project=$SLAB_ROOT/Project.toml \
    $SLAB_ROOT/tools/gmm/scripts/posterior.jl \
    -c $compression \
    $model \
    $features \
    $tmp/\$SGE_TASK_ID.h5"

julia --project=$SLAB_ROOT/Project.toml \
    $SLAB_ROOT/tools/features/scripts/concat.jl \
    -c $compression \
    $out \
    $tmp/[1-9]*h5

